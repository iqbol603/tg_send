const express = require('express');
const rateLimit = require('express-rate-limit');
const helmet = require('helmet');
const cors = require('cors');
const validator = require('validator');
const xss = require('xss');
require('dotenv').config();

const app = express();

// –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
app.use(helmet());
app.use(express.json({ limit: '10mb' }));

// CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ - —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –¥–æ–º–µ–Ω
app.use(cors({
  origin: process.env.ALLOWED_ORIGINS?.split(',') || ['http://localhost:3000'],
  credentials: true,
  optionsSuccessStatus: 200
}));

// Rate limiting
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 –º–∏–Ω—É—Ç
  max: 5, // –º–∞–∫—Å–∏–º—É–º 5 –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –æ–¥–Ω–æ–≥–æ IP –∑–∞ 15 –º–∏–Ω—É—Ç
  message: {
    error: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ'
  },
  standardHeaders: true,
  legacyHeaders: false,
});

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ª–∏–º–∏—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
const submitLimiter = rateLimit({
  windowMs: 60 * 60 * 1000, // 1 —á–∞—Å
  max: 3, // –º–∞–∫—Å–∏–º—É–º 3 –∑–∞—è–≤–∫–∏ –≤ —á–∞—Å —Å –æ–¥–Ω–æ–≥–æ IP
  message: {
    error: '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞—è–≤–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ —á–∞—Å.'
  }
});

app.use('/api/', limiter);

// –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
const validateSubmissionData = (data) => {
  const errors = [];
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏
  if (!data.name || typeof data.name !== 'string') {
    errors.push('–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è');
  } else if (data.name.length < 2 || data.name.length > 50) {
    errors.push('–ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤');
  } else if (!/^[a-zA-Z–∞-—è–ê-–Ø—ë–Å\s-]+$/.test(data.name)) {
    errors.push('–ò–º—è —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã');
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
  if (!data.phone || typeof data.phone !== 'string') {
    errors.push('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
  } else {
    // –û—á–∏—Å—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ –æ—Ç –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä –∏ +
    const cleanPhone = data.phone.replace(/[^\d+]/g, '');
    if (!validator.isMobilePhone(cleanPhone, 'any', { strictMode: false })) {
      errors.push('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞');
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥—Ä–µ—Å–∞
  if (!data.address || typeof data.address !== 'string') {
    errors.push('–ê–¥—Ä–µ—Å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è');
  } else if (data.address.length < 5 || data.address.length > 200) {
    errors.push('–ê–¥—Ä–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 5 –¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤');
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞—Ä–∏—Ñ–∞
//   const allowedTariffs = ['–ë–∞–∑–æ–≤—ã–π', '–°—Ç–∞–Ω–¥–∞—Ä—Ç', '–ü—Ä–µ–º–∏—É–º', '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π'];
//   if (!data.selectedTariff || !allowedTariffs.includes(data.selectedTariff)) {
  if (!data.selectedTariff) {
    errors.push('–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ');
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
  if (data.comment && typeof data.comment === 'string' && data.comment.length > 500) {
    errors.push('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 500 —Å–∏–º–≤–æ–ª–æ–≤');
  }
  
  return errors;
};

// –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç XSS
const sanitizeData = (data) => {
  return {
    name: xss(data.name?.trim()),
    phone: xss(data.phone?.trim()),
    address: xss(data.address?.trim()),
    selectedTariff: xss(data.selectedTariff?.trim()),
    comment: data.comment ? xss(data.comment.trim()) : ''
  };
};

// –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
const sendToTelegram = async (data) => {
  const botToken = process.env.TELEGRAM_BOT_TOKEN;
  const chatId = process.env.TELEGRAM_CHAT_ID;
  
  if (!botToken || !chatId) {
    throw new Error('Telegram credentials not configured');
  }
  
  const message = `
üì• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:
üë§ –ò–º—è: ${data.name}
üì± –ù–æ–º–µ—Ä: ${data.phone}
üè† –ê–¥—Ä–µ—Å: ${data.address}
üì∂ –¢–∞—Ä–∏—Ñ: ${data.selectedTariff}
üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${data.comment || "–ù–µ—Ç"}
üïê –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}
  `.trim();

  const response = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      chat_id: chatId,
      text: message,
      parse_mode: 'HTML'
    }),
  });

  if (!response.ok) {
    const errorData = await response.json();
    throw new Error(`Telegram API error: ${errorData.description || 'Unknown error'}`);
  }

  return await response.json();
};

// –û—Å–Ω–æ–≤–Ω–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
app.post('/api/submit-application', submitLimiter, async (req, res) => {
  try {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    const validationErrors = validateSubmissionData(req.body);
    if (validationErrors.length > 0) {
      return res.status(400).json({
        success: false,
        error: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö',
        details: validationErrors
      });
    }

    // –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    const sanitizedData = sanitizeData(req.body);

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
    await sendToTelegram(sanitizedData);

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (–±–µ–∑ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
    console.log(`[${new Date().toISOString()}] Application submitted successfully for ${sanitizedData.name}`);

    res.json({
      success: true,
      message: '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!'
    });

  } catch (error) {
    console.error(`[${new Date().toISOString()}] Error processing application:`, error.message);
    
    res.status(500).json({
      success: false,
      error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
    });
  }
});

app.post('/api/request-callback', async (req, res) => {
    const { phone } = req.body;
  
    if (!phone || typeof phone !== 'string' || phone.replace(/[^\d]/g, '').length < 9) {
      return res.status(400).json({
        success: false,
        error: '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞'
      });
    }
  
    const sanitizedPhone = xss(phone.trim());
  
    const botToken = process.env.TELEGRAM_BOT_TOKEN;
    const chatId = process.env.TELEGRAM_CHAT_ID;
  
    if (!botToken || !chatId) {
      return res.status(500).json({
        success: false,
        error: '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã Telegram –¥–∞–Ω–Ω—ã–µ'
      });
    }
  
    const message = `üìû –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–≤–æ–Ω–æ–∫!\n\n–¢–µ–ª–µ—Ñ–æ–Ω: ${sanitizedPhone}`;
  
    try {
      const response = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          chat_id: chatId,
          text: message
        })
      });
  
      if (!response.ok) {
        console.log("send");
        const errorData = await response.json();
        throw new Error(`Telegram API error: ${errorData.description}`);
      }
      console.log("send");
  
      res.json({ success: true, message: '–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!' });
    } catch (error) {
      console.error('Telegram send error:', error.message);
      res.status(500).json({
        success: false,
        error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram'
      });
    }
  });
  
  app.post('/api/request-ngn-callback', async (req, res) => {
    const { phone, selectedTariff } = req.body;
  
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!phone || typeof phone !== 'string' || phone.replace(/[^\d]/g, '').length < 9) {
      return res.status(400).json({
        success: false,
        error: '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
      });
    }
  
    if (!selectedTariff || typeof selectedTariff !== 'string') {
      return res.status(400).json({
        success: false,
        error: '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ',
      });
    }
  
    // –û—á–∏—Å—Ç–∫–∞
    const sanitizedPhone = xss(phone.trim());
    const sanitizedTariff = xss(selectedTariff.trim());
  
    const botToken = process.env.TELEGRAM_BOT_TOKEN;
    const chatId = process.env.TELEGRAM_CHAT_ID;
  
    if (!botToken || !chatId) {
      return res.status(500).json({
        success: false,
        error: 'Telegram —Ç–æ–∫–µ–Ω –∏–ª–∏ ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã',
      });
    }
  
    const message = `
  üìû –ó–∞—è–≤–∫–∞ –Ω–∞ –æ–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫ NGN!
  üì± –ù–æ–º–µ—Ä: ${sanitizedPhone}
  üìå –¢–∞—Ä–∏—Ñ: ${sanitizedTariff}
  üïê –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}
  `.trim();
  
    try {
      const tgRes = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          chat_id: chatId,
          text: message,
          parse_mode: 'HTML',
        }),
      });
  
      if (!tgRes.ok) {
        const err = await tgRes.json();
        throw new Error(err.description || 'Telegram API error');
      }
  
      res.json({ success: true, message: '–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞' });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ Telegram:', error.message);
      res.status(500).json({
        success: false,
        error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram',
      });
    }
  });
  

  app.post('/api/request-wimax', async (req, res) => {
    const { name, phone } = req.body;
  
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!name || typeof name !== 'string' || name.length < 2 || name.length > 50) {
      return res.status(400).json({ success: false, error: '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è' });
    }
  
    if (!phone || typeof phone !== 'string' || phone.replace(/[^\d]/g, '').length < 9) {
      return res.status(400).json({ success: false, error: '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞' });
    }
  
    // –û—á–∏—Å—Ç–∫–∞
    const cleanName = xss(name.trim());
    const cleanPhone = xss(phone.trim());
  
    const botToken = process.env.TELEGRAM_BOT_TOKEN;
    const chatId = process.env.TELEGRAM_CHAT_ID;
  
    if (!botToken || !chatId) {
      return res.status(500).json({
        success: false,
        error: 'Telegram —Ç–æ–∫–µ–Ω –∏–ª–∏ ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã'
      });
    }
  
    const message = `
  ‚úâÔ∏è –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å WiMAX!
  üë§ –ò–º—è: ${cleanName}
  ‚òéÔ∏è –¢–µ–ª–µ—Ñ–æ–Ω: ${cleanPhone}
  üïê –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}
  `.trim();
  
    try {
      const tgRes = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          chat_id: chatId,
          text: message,
          parse_mode: 'HTML',
        }),
      });
  
      if (!tgRes.ok) {
        const err = await tgRes.json();
        throw new Error(err.description || 'Telegram API error');
      }
  
      res.json({ success: true, message: '–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞' });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ Telegram:', error.message);
      res.status(500).json({
        success: false,
        error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram'
      });
    }
  });
  

  app.post('/api/submit-connection-request', async (req, res) => {
    const { name, phone, address, comment, tariff } = req.body;
  
    const errors = [];
  
    if (!name || typeof name !== 'string' || name.length < 2 || name.length > 50) {
      errors.push('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è');
    }
    if (!phone || typeof phone !== 'string' || phone.replace(/[^\d]/g, '').length < 9) {
      errors.push('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞');
    }
    if (!address || typeof address !== 'string' || address.length < 5 || address.length > 200) {
      errors.push('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å');
    }
    if (!tariff || typeof tariff !== 'string') {
      errors.push('–¢–∞—Ä–∏—Ñ –Ω–µ –≤—ã–±—Ä–∞–Ω');
    }
    if (comment && typeof comment === 'string' && comment.length > 500) {
      errors.push('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π');
    }
  
    if (errors.length > 0) {
      return res.status(400).json({
        success: false,
        error: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö',
        details: errors,
      });
    }
  
    const cleanData = {
      name: xss(name.trim()),
      phone: xss(phone.trim()),
      address: xss(address.trim()),
      tariff: xss(tariff.trim()),
      comment: comment ? xss(comment.trim()) : '–Ω–µ—Ç',
    };
  
    const botToken = process.env.TELEGRAM_BOT_TOKEN;
    const chatId = process.env.TELEGRAM_CHAT_ID;
  
    if (!botToken || !chatId) {
      return res.status(500).json({
        success: false,
        error: 'Telegram —Ç–æ–∫–µ–Ω –∏–ª–∏ —á–∞—Ç-ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã',
      });
    }
  
    const message = `
  üì• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:
  üë§ –ò–º—è: ${cleanData.name}
  üì± –ù–æ–º–µ—Ä: ${cleanData.phone}
  üè† –ê–¥—Ä–µ—Å: ${cleanData.address}
  üì∂ –¢–∞—Ä–∏—Ñ: ${cleanData.tariff}
  üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${cleanData.comment}
  üïê –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}
  `.trim();
  
    try {
      const response = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          chat_id: chatId,
          text: message,
          parse_mode: 'HTML',
        }),
      });
  
      if (!response.ok) {
        const err = await response.json();
        throw new Error(err.description || '–û—à–∏–±–∫–∞ Telegram API');
      }
  
      res.json({ success: true, message: '–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞' });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ Telegram:', error.message);
      res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram' });
    }
  });
   

// Health check
app.get('/api/health', (req, res) => {
  res.json({ status: 'OK', timestamp: new Date().toISOString() });
});

// 404 handler
app.use((req, res) => {
  res.status(404).json({ error: 'Endpoint not found' });
});

// Error handler
app.use((error, req, res, next) => {
  console.error(`[${new Date().toISOString()}] Unhandled error:`, error);
  res.status(500).json({ error: 'Internal server error' });
});

const PORT = process.env.PORT || 3001;

app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
  console.log(`Environment: ${process.env.NODE_ENV || 'development'}`);
});

module.exports = app;